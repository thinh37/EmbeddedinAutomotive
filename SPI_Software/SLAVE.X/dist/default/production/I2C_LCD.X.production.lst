

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Wed Jun 14 20:29:07 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    27                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    28                           	dabs	1,0x7E,2
    29     0000                     
    30                           ; Generated 09/02/2023 GMT
    31                           ; 
    32                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution. Publication is not required when
    46                           ;        this file is used in an embedded application.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC16F877A Definitions
    62                           ; 
    63                           ; SFR Addresses
    64     0000                     	;# 
    65     0001                     	;# 
    66     0002                     	;# 
    67     0003                     	;# 
    68     0004                     	;# 
    69     0005                     	;# 
    70     0006                     	;# 
    71     0007                     	;# 
    72     0008                     	;# 
    73     0009                     	;# 
    74     000A                     	;# 
    75     000B                     	;# 
    76     000C                     	;# 
    77     000D                     	;# 
    78     000E                     	;# 
    79     000E                     	;# 
    80     000F                     	;# 
    81     0010                     	;# 
    82     0011                     	;# 
    83     0012                     	;# 
    84     0013                     	;# 
    85     0014                     	;# 
    86     0015                     	;# 
    87     0015                     	;# 
    88     0016                     	;# 
    89     0017                     	;# 
    90     0018                     	;# 
    91     0019                     	;# 
    92     001A                     	;# 
    93     001B                     	;# 
    94     001B                     	;# 
    95     001C                     	;# 
    96     001D                     	;# 
    97     001E                     	;# 
    98     001F                     	;# 
    99     0081                     	;# 
   100     0085                     	;# 
   101     0086                     	;# 
   102     0087                     	;# 
   103     0088                     	;# 
   104     0089                     	;# 
   105     008C                     	;# 
   106     008D                     	;# 
   107     008E                     	;# 
   108     0091                     	;# 
   109     0092                     	;# 
   110     0093                     	;# 
   111     0094                     	;# 
   112     0098                     	;# 
   113     0099                     	;# 
   114     009C                     	;# 
   115     009D                     	;# 
   116     009E                     	;# 
   117     009F                     	;# 
   118     010C                     	;# 
   119     010D                     	;# 
   120     010E                     	;# 
   121     010F                     	;# 
   122     018C                     	;# 
   123     018D                     	;# 
   124     0000                     	;# 
   125     0001                     	;# 
   126     0002                     	;# 
   127     0003                     	;# 
   128     0004                     	;# 
   129     0005                     	;# 
   130     0006                     	;# 
   131     0007                     	;# 
   132     0008                     	;# 
   133     0009                     	;# 
   134     000A                     	;# 
   135     000B                     	;# 
   136     000C                     	;# 
   137     000D                     	;# 
   138     000E                     	;# 
   139     000E                     	;# 
   140     000F                     	;# 
   141     0010                     	;# 
   142     0011                     	;# 
   143     0012                     	;# 
   144     0013                     	;# 
   145     0014                     	;# 
   146     0015                     	;# 
   147     0015                     	;# 
   148     0016                     	;# 
   149     0017                     	;# 
   150     0018                     	;# 
   151     0019                     	;# 
   152     001A                     	;# 
   153     001B                     	;# 
   154     001B                     	;# 
   155     001C                     	;# 
   156     001D                     	;# 
   157     001E                     	;# 
   158     001F                     	;# 
   159     0081                     	;# 
   160     0085                     	;# 
   161     0086                     	;# 
   162     0087                     	;# 
   163     0088                     	;# 
   164     0089                     	;# 
   165     008C                     	;# 
   166     008D                     	;# 
   167     008E                     	;# 
   168     0091                     	;# 
   169     0092                     	;# 
   170     0093                     	;# 
   171     0094                     	;# 
   172     0098                     	;# 
   173     0099                     	;# 
   174     009C                     	;# 
   175     009D                     	;# 
   176     009E                     	;# 
   177     009F                     	;# 
   178     010C                     	;# 
   179     010D                     	;# 
   180     010E                     	;# 
   181     010F                     	;# 
   182     018C                     	;# 
   183     018D                     	;# 
   184     0000                     	;# 
   185     0001                     	;# 
   186     0002                     	;# 
   187     0003                     	;# 
   188     0004                     	;# 
   189     0005                     	;# 
   190     0006                     	;# 
   191     0007                     	;# 
   192     0008                     	;# 
   193     0009                     	;# 
   194     000A                     	;# 
   195     000B                     	;# 
   196     000C                     	;# 
   197     000D                     	;# 
   198     000E                     	;# 
   199     000E                     	;# 
   200     000F                     	;# 
   201     0010                     	;# 
   202     0011                     	;# 
   203     0012                     	;# 
   204     0013                     	;# 
   205     0014                     	;# 
   206     0015                     	;# 
   207     0015                     	;# 
   208     0016                     	;# 
   209     0017                     	;# 
   210     0018                     	;# 
   211     0019                     	;# 
   212     001A                     	;# 
   213     001B                     	;# 
   214     001B                     	;# 
   215     001C                     	;# 
   216     001D                     	;# 
   217     001E                     	;# 
   218     001F                     	;# 
   219     0081                     	;# 
   220     0085                     	;# 
   221     0086                     	;# 
   222     0087                     	;# 
   223     0088                     	;# 
   224     0089                     	;# 
   225     008C                     	;# 
   226     008D                     	;# 
   227     008E                     	;# 
   228     0091                     	;# 
   229     0092                     	;# 
   230     0093                     	;# 
   231     0094                     	;# 
   232     0098                     	;# 
   233     0099                     	;# 
   234     009C                     	;# 
   235     009D                     	;# 
   236     009E                     	;# 
   237     009F                     	;# 
   238     010C                     	;# 
   239     010D                     	;# 
   240     010E                     	;# 
   241     010F                     	;# 
   242     018C                     	;# 
   243     018D                     	;# 
   244                           
   245                           	psect	idataCOMMON
   246     05E9                     __pidataCOMMON:
   247                           
   248                           ;initializer for _dataTemp
   249     05E9  347A               	retlw	122
   250                           
   251                           ;initializer for _dataTrans
   252     05EA  347A               	retlw	122
   253                           
   254                           	psect	idataBANK0
   255     05E8                     __pidataBANK0:
   256                           
   257                           ;initializer for _BackLight_State
   258     05E8  3408               	retlw	8
   259                           
   260                           	psect	nvBANK0
   261     0020                     __pnvBANK0:
   262     0020                     _i2c_add:
   263     0020                     	ds	1
   264     0013                     _SSPBUF	set	19
   265     0014                     _SSPCON	set	20
   266     0063                     _SSPIF	set	99
   267     0031                     _RB1	set	49
   268     0032                     _RB2	set	50
   269     0030                     _RB0	set	48
   270     0033                     _RB3	set	51
   271     0093                     _SSPADD	set	147
   272     0094                     _SSPSTAT	set	148
   273     0091                     _SSPCON2	set	145
   274     048B                     _RCEN	set	1163
   275     048E                     _ACKSTAT	set	1166
   276     048C                     _ACKEN	set	1164
   277     048D                     _ACKDT	set	1165
   278     048A                     _PEN	set	1162
   279     0489                     _RSEN	set	1161
   280     0488                     _SEN	set	1160
   281     043C                     _TRISC4	set	1084
   282     043B                     _TRISC3	set	1083
   283     0433                     _TRISB3	set	1075
   284     0432                     _TRISB2	set	1074
   285     0431                     _TRISB1	set	1073
   286     0430                     _TRISB0	set	1072
   287                           
   288                           	psect	cinit
   289     07E8                     start_initialization:	
   290                           ; #config settings
   291                           
   292     07E8                     __initialization:
   293                           
   294                           ; Initialize objects allocated to BANK0
   295     07E8  120A  118A  25E8  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   296     07ED  00A1               	movwf	__pdataBANK0& (0+127)
   297                           
   298                           ; Initialize objects allocated to COMMON
   299     07EE  120A  118A  25E9  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   300     07F3  00FC               	movwf	__pdataCOMMON& (0+127)
   301     07F4  120A  118A  25EA  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   302     07F9  00FD               	movwf	(__pdataCOMMON+1)& (0+127)
   303                           
   304                           ; Clear objects allocated to COMMON
   305     07FA  01FA               	clrf	__pbssCOMMON& (0+127)
   306     07FB  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   307     07FC                     end_of_initialization:	
   308                           ;End of C runtime variable initialization code
   309                           
   310     07FC                     __end_of__initialization:
   311     07FC  0183               	clrf	3
   312     07FD  120A  118A  2E99   	ljmp	_main	;jump to C main() function
   313                           
   314                           	psect	bssCOMMON
   315     007A                     __pbssCOMMON:
   316     007A                     _RS:
   317     007A                     	ds	1
   318     007B                     _dataReceive:
   319     007B                     	ds	1
   320                           
   321                           	psect	dataCOMMON
   322     007C                     __pdataCOMMON:
   323     007C                     _dataTemp:
   324     007C                     	ds	1
   325     007D                     _dataTrans:
   326     007D                     	ds	1
   327                           
   328                           	psect	dataBANK0
   329     0021                     __pdataBANK0:
   330     0021                     _BackLight_State:
   331     0021                     	ds	1
   332                           
   333                           	psect	cstackCOMMON
   334     0070                     __pcstackCOMMON:
   335     0070                     ?_LCD__Config:
   336     0070                     ??_LCD__Config:	
   337                           ; 1 bytes @ 0x0
   338                           
   339     0070                     ?_LCD_Init:	
   340                           ; 1 bytes @ 0x0
   341                           
   342     0070                     ?_LCD_Write_Char:	
   343                           ; 1 bytes @ 0x0
   344                           
   345     0070                     ?_IO_Expander_Write:	
   346                           ; 1 bytes @ 0x0
   347                           
   348     0070                     ?_LCD_CMD:	
   349                           ; 1 bytes @ 0x0
   350                           
   351     0070                     ?_config:	
   352                           ; 1 bytes @ 0x0
   353                           
   354     0070                     ??_config:	
   355                           ; 1 bytes @ 0x0
   356                           
   357     0070                     ?_SpiSlave:	
   358                           ; 1 bytes @ 0x0
   359                           
   360     0070                     ??_SpiSlave:	
   361                           ; 1 bytes @ 0x0
   362                           
   363     0070                     ?_I2C__Wait:	
   364                           ; 1 bytes @ 0x0
   365                           
   366     0070                     ??_I2C__Wait:	
   367                           ; 1 bytes @ 0x0
   368                           
   369     0070                     ?_I2C__Start:	
   370                           ; 1 bytes @ 0x0
   371                           
   372     0070                     ??_I2C__Start:	
   373                           ; 1 bytes @ 0x0
   374                           
   375     0070                     ?_I2C__Stop:	
   376                           ; 1 bytes @ 0x0
   377                           
   378     0070                     ??_I2C__Stop:	
   379                           ; 1 bytes @ 0x0
   380                           
   381     0070                     ?_I2C__Write:	
   382                           ; 1 bytes @ 0x0
   383                           
   384     0070                     ??_I2C__Write:	
   385                           ; 1 bytes @ 0x0
   386                           
   387     0070                     ?_LCD_Write_4Bit:	
   388                           ; 1 bytes @ 0x0
   389                           
   390     0070                     ?_main:	
   391                           ; 1 bytes @ 0x0
   392                           
   393     0070                     I2C__Write@data:	
   394                           ; 2 bytes @ 0x0
   395                           
   396                           
   397                           ; 1 bytes @ 0x0
   398     0070                     	ds	1
   399     0071                     ??_IO_Expander_Write:
   400     0071                     SpiSlave@temp:	
   401                           ; 1 bytes @ 0x1
   402                           
   403     0071                     IO_Expander_Write@Data:	
   404                           ; 1 bytes @ 0x1
   405                           
   406                           
   407                           ; 1 bytes @ 0x1
   408     0071                     	ds	1
   409     0072                     ??_LCD_Write_4Bit:
   410     0072                     SpiSlave@i:	
   411                           ; 1 bytes @ 0x2
   412                           
   413                           
   414                           ; 2 bytes @ 0x2
   415     0072                     	ds	1
   416     0073                     LCD_Write_4Bit@Nibble:
   417                           
   418                           ; 1 bytes @ 0x3
   419     0073                     	ds	1
   420     0074                     ??_LCD_Write_Char:
   421     0074                     ??_LCD_CMD:	
   422                           ; 1 bytes @ 0x4
   423                           
   424                           
   425                           ; 1 bytes @ 0x4
   426     0074                     	ds	1
   427     0075                     LCD_CMD@CMD:
   428     0075                     LCD_Write_Char@Data:	
   429                           ; 1 bytes @ 0x5
   430                           
   431                           
   432                           ; 1 bytes @ 0x5
   433     0075                     	ds	1
   434     0076                     ??_LCD_Init:
   435     0076                     ?_LCD_Set_Cursor:	
   436                           ; 1 bytes @ 0x6
   437                           
   438     0076                     LCD_Set_Cursor@COL:	
   439                           ; 1 bytes @ 0x6
   440                           
   441                           
   442                           ; 1 bytes @ 0x6
   443     0076                     	ds	1
   444     0077                     ??_LCD_Set_Cursor:
   445                           
   446                           ; 1 bytes @ 0x7
   447     0077                     	ds	2
   448     0079                     LCD_Init@I2C_Add:
   449     0079                     LCD_Set_Cursor@ROW:	
   450                           ; 1 bytes @ 0x9
   451                           
   452                           
   453                           ; 1 bytes @ 0x9
   454     0079                     	ds	1
   455     007A                     ??_main:
   456                           
   457                           	psect	maintext
   458     0699                     __pmaintext:	
   459                           ; 1 bytes @ 0xA
   460 ;;
   461 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   462 ;;
   463 ;; *************** function _main *****************
   464 ;; Defined at:
   465 ;;		line 51 in file "main.c"
   466 ;; Parameters:    Size  Location     Type
   467 ;;		None
   468 ;; Auto vars:     Size  Location     Type
   469 ;;		None
   470 ;; Return value:  Size  Location     Type
   471 ;;                  2   58[None  ] int 
   472 ;; Registers used:
   473 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   474 ;; Tracked objects:
   475 ;;		On entry : B00/0
   476 ;;		On exit  : 0/0
   477 ;;		Unchanged: 0/0
   478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   479 ;;      Params:         0       0       0       0       0
   480 ;;      Locals:         0       0       0       0       0
   481 ;;      Temps:          0       0       0       0       0
   482 ;;      Totals:         0       0       0       0       0
   483 ;;Total ram usage:        0 bytes
   484 ;; Hardware stack levels required when called: 6
   485 ;; This function calls:
   486 ;;		_LCD_Init
   487 ;;		_LCD_Set_Cursor
   488 ;;		_LCD_Write_Char
   489 ;;		_LCD__Config
   490 ;;		_SpiSlave
   491 ;;		_config
   492 ;; This function is called by:
   493 ;;		Startup code after reset
   494 ;; This function uses a non-reentrant model
   495 ;;
   496                           
   497     0699                     _main:	
   498                           ;psect for function _main
   499                           
   500     0699                     l1085:	
   501                           ;incstack = 0
   502                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   503                           
   504                           
   505                           ;main.c: 53:     LCD__Config();
   506     0699  120A  118A  2611  120A  118A  	fcall	_LCD__Config
   507     069E                     l1087:
   508                           
   509                           ;main.c: 54:     LCD_Init(0x4E);
   510     069E  304E               	movlw	78
   511     069F  120A  118A  274C  120A  118A  	fcall	_LCD_Init
   512     06A4                     l1089:
   513                           
   514                           ;main.c: 55:     config();
   515     06A4  120A  118A  25EB  120A  118A  	fcall	_config
   516     06A9                     l1091:
   517                           
   518                           ;main.c: 57:     SpiSlave();
   519     06A9  120A  118A  2703  120A  118A  	fcall	_SpiSlave
   520     06AE                     l1093:
   521                           
   522                           ;main.c: 59:     LCD_Set_Cursor(1, 1);
   523     06AE  01F6               	clrf	LCD_Set_Cursor@COL
   524     06AF  0AF6               	incf	LCD_Set_Cursor@COL,f
   525     06B0  3001               	movlw	1
   526     06B1  120A  118A  26CD  120A  118A  	fcall	_LCD_Set_Cursor
   527     06B6                     l1095:
   528                           
   529                           ;main.c: 60:     LCD_Write_Char(dataReceive);
   530     06B6  087B               	movf	_dataReceive,w
   531     06B7  120A  118A  2661  120A  118A  	fcall	_LCD_Write_Char
   532     06BC                     l1097:
   533                           
   534                           ;main.c: 61:     if(dataTemp== 'a') dataTemp = 'z';
   535     06BC  3061               	movlw	97
   536     06BD  067C               	xorwf	_dataTemp,w
   537     06BE  1D03               	btfss	3,2
   538     06BF  2EC1               	goto	u211
   539     06C0  2EC2               	goto	u210
   540     06C1                     u211:
   541     06C1  2EC5               	goto	l1101
   542     06C2                     u210:
   543     06C2                     l1099:
   544     06C2  307A               	movlw	122
   545     06C3  00FC               	movwf	_dataTemp
   546     06C4  2EC7               	goto	l1103
   547     06C5                     l1101:
   548     06C5  3001               	movlw	1
   549     06C6  02FC               	subwf	_dataTemp,f
   550     06C7                     l1103:
   551                           
   552                           ;main.c: 63:     dataTrans=dataTemp;
   553     06C7  087C               	movf	_dataTemp,w
   554     06C8  00FD               	movwf	_dataTrans
   555     06C9  2EA9               	goto	l1091
   556     06CA  120A  118A  2800   	ljmp	start
   557     06CD                     __end_of_main:
   558                           
   559                           	psect	text1
   560     05EB                     __ptext1:	
   561 ;; *************** function _config *****************
   562 ;; Defined at:
   563 ;;		line 19 in file "main.c"
   564 ;; Parameters:    Size  Location     Type
   565 ;;		None
   566 ;; Auto vars:     Size  Location     Type
   567 ;;		None
   568 ;; Return value:  Size  Location     Type
   569 ;;                  1    wreg      void 
   570 ;; Registers used:
   571 ;;		None
   572 ;; Tracked objects:
   573 ;;		On entry : 0/0
   574 ;;		On exit  : 0/0
   575 ;;		Unchanged: 0/0
   576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   577 ;;      Params:         0       0       0       0       0
   578 ;;      Locals:         0       0       0       0       0
   579 ;;      Temps:          0       0       0       0       0
   580 ;;      Totals:         0       0       0       0       0
   581 ;;Total ram usage:        0 bytes
   582 ;; Hardware stack levels used: 1
   583 ;; This function calls:
   584 ;;		Nothing
   585 ;; This function is called by:
   586 ;;		_main
   587 ;; This function uses a non-reentrant model
   588 ;;
   589                           
   590     05EB                     _config:	
   591                           ;psect for function _config
   592                           
   593     05EB                     l809:	
   594                           ;incstack = 0
   595                           ; Regs used in _config: []
   596                           
   597                           
   598                           ;main.c: 20:     TRISB0 = 1;
   599     05EB  1683               	bsf	3,5	;RP0=1, select bank1
   600     05EC  1303               	bcf	3,6	;RP1=0, select bank1
   601     05ED  1406               	bsf	6,0	;volatile
   602                           
   603                           ;main.c: 21:     TRISB1 = 1;
   604     05EE  1486               	bsf	6,1	;volatile
   605                           
   606                           ;main.c: 22:     TRISB2 = 0;
   607     05EF  1106               	bcf	6,2	;volatile
   608                           
   609                           ;main.c: 23:     TRISB3 = 1;
   610     05F0  1586               	bsf	6,3	;volatile
   611     05F1                     l33:
   612     05F1  0008               	return
   613     05F2                     __end_of_config:
   614                           
   615                           	psect	text2
   616     0703                     __ptext2:	
   617 ;; *************** function _SpiSlave *****************
   618 ;; Defined at:
   619 ;;		line 25 in file "main.c"
   620 ;; Parameters:    Size  Location     Type
   621 ;;		None
   622 ;; Auto vars:     Size  Location     Type
   623 ;;  i               2    2[COMMON] int 
   624 ;;  temp            1    1[COMMON] unsigned char 
   625 ;; Return value:  Size  Location     Type
   626 ;;                  1    wreg      void 
   627 ;; Registers used:
   628 ;;		wreg, status,2, status,0, btemp+1
   629 ;; Tracked objects:
   630 ;;		On entry : 0/0
   631 ;;		On exit  : 0/0
   632 ;;		Unchanged: 0/0
   633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   634 ;;      Params:         0       0       0       0       0
   635 ;;      Locals:         3       0       0       0       0
   636 ;;      Temps:          1       0       0       0       0
   637 ;;      Totals:         4       0       0       0       0
   638 ;;Total ram usage:        4 bytes
   639 ;; Hardware stack levels used: 1
   640 ;; This function calls:
   641 ;;		Nothing
   642 ;; This function is called by:
   643 ;;		_main
   644 ;; This function uses a non-reentrant model
   645 ;;
   646                           
   647     0703                     _SpiSlave:	
   648                           ;psect for function _SpiSlave
   649                           
   650     0703                     l811:	
   651                           ;incstack = 0
   652                           ; Regs used in _SpiSlave: [wreg+status,2+status,0+btemp+1]
   653                           
   654     0703                     l36:	
   655                           ;main.c: 26:     while(RB3 == 1);
   656                           
   657     0703  1283               	bcf	3,5	;RP0=0, select bank0
   658     0704  1303               	bcf	3,6	;RP1=0, select bank0
   659     0705  1986               	btfsc	6,3	;volatile
   660     0706  2F08               	goto	u51
   661     0707  2F09               	goto	u50
   662     0708                     u51:
   663     0708  2F03               	goto	l36
   664     0709                     u50:
   665     0709                     l39:
   666     0709  1C06               	btfss	6,0	;volatile
   667     070A  2F0C               	goto	u61
   668     070B  2F0D               	goto	u60
   669     070C                     u61:
   670     070C  2F09               	goto	l39
   671     070D                     u60:
   672     070D                     l813:
   673                           
   674                           ;main.c: 28:     char temp;;main.c: 29:     for(int i=0;i<8;){
   675     070D  01F2               	clrf	SpiSlave@i
   676     070E  01F3               	clrf	SpiSlave@i+1
   677     070F                     l42:
   678                           
   679                           ;main.c: 30:         if(RB0 == 1){
   680     070F  1283               	bcf	3,5	;RP0=0, select bank0
   681     0710  1303               	bcf	3,6	;RP1=0, select bank0
   682     0711  1C06               	btfss	6,0	;volatile
   683     0712  2F14               	goto	u71
   684     0713  2F15               	goto	u70
   685     0714                     u71:
   686     0714  2F34               	goto	l831
   687     0715                     u70:
   688     0715                     l819:
   689                           
   690                           ;main.c: 31:              temp=dataTrans & (char)0x80;
   691     0715  087D               	movf	_dataTrans,w
   692     0716  3980               	andlw	128
   693     0717  00F1               	movwf	SpiSlave@temp
   694     0718                     l821:
   695                           
   696                           ;main.c: 32:              if(temp == (char)0x80){
   697     0718  3080               	movlw	128
   698     0719  0671               	xorwf	SpiSlave@temp,w
   699     071A  1D03               	btfss	3,2
   700     071B  2F1D               	goto	u81
   701     071C  2F1E               	goto	u80
   702     071D                     u81:
   703     071D  2F20               	goto	l45
   704     071E                     u80:
   705     071E                     l823:
   706                           
   707                           ;main.c: 33:                     RB2 = 1;
   708     071E  1506               	bsf	6,2	;volatile
   709                           
   710                           ;main.c: 34:              }
   711     071F  2F21               	goto	l825
   712     0720                     l45:	
   713                           ;main.c: 35:              else{
   714                           
   715                           
   716                           ;main.c: 36:                     RB2 = 0;
   717     0720  1106               	bcf	6,2	;volatile
   718     0721                     l825:
   719                           
   720                           ;main.c: 38:              dataTrans = dataTrans <<1;
   721     0721  087D               	movf	_dataTrans,w
   722     0722  00F0               	movwf	??_SpiSlave
   723     0723  0770               	addwf	??_SpiSlave,w
   724     0724  00FD               	movwf	_dataTrans
   725                           
   726                           ;main.c: 39:             dataReceive=dataReceive<<1;
   727     0725  087B               	movf	_dataReceive,w
   728     0726  00F0               	movwf	??_SpiSlave
   729     0727  0770               	addwf	??_SpiSlave,w
   730     0728  00FB               	movwf	_dataReceive
   731                           
   732                           ;main.c: 40:             while(RB0==1){
   733     0729  2F2F               	goto	l829
   734     072A                     l827:
   735                           
   736                           ;main.c: 41:                 dataReceive=dataReceive | RB1;
   737     072A  3000               	movlw	0
   738     072B  1886               	btfsc	6,1	;volatile
   739     072C  3001               	movlw	1
   740     072D  047B               	iorwf	_dataReceive,w
   741     072E  00FB               	movwf	_dataReceive
   742     072F                     l829:
   743                           
   744                           ;main.c: 40:             while(RB0==1){
   745     072F  1806               	btfsc	6,0	;volatile
   746     0730  2F32               	goto	u91
   747     0731  2F33               	goto	u90
   748     0732                     u91:
   749     0732  2F2A               	goto	l827
   750     0733                     u90:
   751     0733  2F3E               	goto	l833
   752     0734                     l831:
   753                           
   754                           ;main.c: 45:             i++;
   755     0734  3001               	movlw	1
   756     0735  07F2               	addwf	SpiSlave@i,f
   757     0736  1803               	skipnc
   758     0737  0AF3               	incf	SpiSlave@i+1,f
   759     0738  3000               	movlw	0
   760     0739  07F3               	addwf	SpiSlave@i+1,f
   761     073A                     l51:	
   762                           ;main.c: 46:             while(RB0==0);
   763                           
   764     073A  1C06               	btfss	6,0	;volatile
   765     073B  2F3D               	goto	u101
   766     073C  2F3E               	goto	u100
   767     073D                     u101:
   768     073D  2F3A               	goto	l51
   769     073E                     u100:
   770     073E                     l833:
   771                           
   772                           ;main.c: 48:     }
   773     073E  0873               	movf	SpiSlave@i+1,w
   774     073F  3A80               	xorlw	128
   775     0740  00FF               	movwf	btemp+1
   776     0741  3080               	movlw	128
   777     0742  027F               	subwf	btemp+1,w
   778     0743  1D03               	skipz
   779     0744  2F47               	goto	u115
   780     0745  3008               	movlw	8
   781     0746  0272               	subwf	SpiSlave@i,w
   782     0747                     u115:
   783     0747  1C03               	skipc
   784     0748  2F4A               	goto	u111
   785     0749  2F4B               	goto	u110
   786     074A                     u111:
   787     074A  2F0F               	goto	l42
   788     074B                     u110:
   789     074B                     l54:
   790     074B  0008               	return
   791     074C                     __end_of_SpiSlave:
   792                           
   793                           	psect	text3
   794     0611                     __ptext3:	
   795 ;; *************** function _LCD__Config *****************
   796 ;; Defined at:
   797 ;;		line 9 in file "LCD.c"
   798 ;; Parameters:    Size  Location     Type
   799 ;;		None
   800 ;; Auto vars:     Size  Location     Type
   801 ;;		None
   802 ;; Return value:  Size  Location     Type
   803 ;;                  1    wreg      void 
   804 ;; Registers used:
   805 ;;		wreg, status,2
   806 ;; Tracked objects:
   807 ;;		On entry : 0/0
   808 ;;		On exit  : 0/0
   809 ;;		Unchanged: 0/0
   810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   811 ;;      Params:         0       0       0       0       0
   812 ;;      Locals:         0       0       0       0       0
   813 ;;      Temps:          0       0       0       0       0
   814 ;;      Totals:         0       0       0       0       0
   815 ;;Total ram usage:        0 bytes
   816 ;; Hardware stack levels used: 1
   817 ;; This function calls:
   818 ;;		Nothing
   819 ;; This function is called by:
   820 ;;		_main
   821 ;; This function uses a non-reentrant model
   822 ;;
   823                           
   824     0611                     _LCD__Config:	
   825                           ;psect for function _LCD__Config
   826                           
   827     0611                     l835:	
   828                           ;incstack = 0
   829                           ; Regs used in _LCD__Config: [wreg+status,2]
   830                           
   831                           
   832                           ;LCD.c: 11:   SSPCON = 0x28;
   833     0611  3028               	movlw	40
   834     0612  1283               	bcf	3,5	;RP0=0, select bank0
   835     0613  1303               	bcf	3,6	;RP1=0, select bank0
   836     0614  0094               	movwf	20	;volatile
   837     0615                     l837:
   838                           
   839                           ;LCD.c: 12:   SSPCON2 = 0x00;
   840     0615  1683               	bsf	3,5	;RP0=1, select bank1
   841     0616  1303               	bcf	3,6	;RP1=0, select bank1
   842     0617  0191               	clrf	17	;volatile
   843     0618                     l839:
   844                           
   845                           ;LCD.c: 13:   SSPSTAT = 0x00;
   846     0618  0194               	clrf	20	;volatile
   847                           
   848                           ;LCD.c: 14:   SSPADD = ((16000000/4)/100000) - 1;
   849     0619  3027               	movlw	39
   850     061A  0093               	movwf	19	;volatile
   851     061B                     l841:
   852                           
   853                           ;LCD.c: 15:   TRISC3 = 1;
   854     061B  1587               	bsf	7,3	;volatile
   855     061C                     l843:
   856                           
   857                           ;LCD.c: 16:   TRISC4 = 1;
   858     061C  1607               	bsf	7,4	;volatile
   859     061D                     l109:
   860     061D  0008               	return
   861     061E                     __end_of_LCD__Config:
   862                           
   863                           	psect	text4
   864     0661                     __ptext4:	
   865 ;; *************** function _LCD_Write_Char *****************
   866 ;; Defined at:
   867 ;;		line 127 in file "LCD.c"
   868 ;; Parameters:    Size  Location     Type
   869 ;;  Data            1    wreg     unsigned char 
   870 ;; Auto vars:     Size  Location     Type
   871 ;;  Data            1    5[COMMON] unsigned char 
   872 ;; Return value:  Size  Location     Type
   873 ;;                  1    wreg      void 
   874 ;; Registers used:
   875 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   876 ;; Tracked objects:
   877 ;;		On entry : 0/0
   878 ;;		On exit  : 0/0
   879 ;;		Unchanged: 0/0
   880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   881 ;;      Params:         0       0       0       0       0
   882 ;;      Locals:         1       0       0       0       0
   883 ;;      Temps:          1       0       0       0       0
   884 ;;      Totals:         2       0       0       0       0
   885 ;;Total ram usage:        2 bytes
   886 ;; Hardware stack levels used: 1
   887 ;; Hardware stack levels required when called: 4
   888 ;; This function calls:
   889 ;;		_LCD_Write_4Bit
   890 ;; This function is called by:
   891 ;;		_main
   892 ;;		_LCD_Write_String
   893 ;; This function uses a non-reentrant model
   894 ;;
   895                           
   896     0661                     _LCD_Write_Char:	
   897                           ;psect for function _LCD_Write_Char
   898                           
   899                           
   900                           ;incstack = 0
   901                           ; Regs used in _LCD_Write_Char: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   902                           ;LCD_Write_Char@Data stored from wreg
   903     0661  00F5               	movwf	LCD_Write_Char@Data
   904     0662                     l1081:
   905                           
   906                           ;LCD.c: 127: void LCD_Write_Char(char Data);LCD.c: 128: {;LCD.c: 129:   RS = 1;
   907     0662  01FA               	clrf	_RS
   908     0663  0AFA               	incf	_RS,f
   909     0664                     l1083:
   910                           
   911                           ;LCD.c: 130:   LCD_Write_4Bit(Data & 0xF0);
   912     0664  0875               	movf	LCD_Write_Char@Data,w
   913     0665  39F0               	andlw	240
   914     0666  120A  118A  262E  120A  118A  	fcall	_LCD_Write_4Bit
   915                           
   916                           ;LCD.c: 131:   LCD_Write_4Bit((Data << 4) & 0xF0);
   917     066B  0875               	movf	LCD_Write_Char@Data,w
   918     066C  00F4               	movwf	??_LCD_Write_Char
   919     066D  3003               	movlw	3
   920     066E                     u205:
   921     066E  1003               	clrc
   922     066F  0DF4               	rlf	??_LCD_Write_Char,f
   923     0670  3EFF               	addlw	-1
   924     0671  1D03               	skipz
   925     0672  2E6E               	goto	u205
   926     0673  1003               	clrc
   927     0674  0D74               	rlf	??_LCD_Write_Char,w
   928     0675  39F0               	andlw	240
   929     0676  120A  118A  262E  120A  118A  	fcall	_LCD_Write_4Bit
   930     067B                     l157:
   931     067B  0008               	return
   932     067C                     __end_of_LCD_Write_Char:
   933                           
   934                           	psect	text5
   935     06CD                     __ptext5:	
   936 ;; *************** function _LCD_Set_Cursor *****************
   937 ;; Defined at:
   938 ;;		line 140 in file "LCD.c"
   939 ;; Parameters:    Size  Location     Type
   940 ;;  ROW             1    wreg     unsigned char 
   941 ;;  COL             1    6[COMMON] unsigned char 
   942 ;; Auto vars:     Size  Location     Type
   943 ;;  ROW             1    9[COMMON] unsigned char 
   944 ;; Return value:  Size  Location     Type
   945 ;;                  1    wreg      void 
   946 ;; Registers used:
   947 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   948 ;; Tracked objects:
   949 ;;		On entry : 0/0
   950 ;;		On exit  : 0/0
   951 ;;		Unchanged: 0/0
   952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   953 ;;      Params:         1       0       0       0       0
   954 ;;      Locals:         1       0       0       0       0
   955 ;;      Temps:          2       0       0       0       0
   956 ;;      Totals:         4       0       0       0       0
   957 ;;Total ram usage:        4 bytes
   958 ;; Hardware stack levels used: 1
   959 ;; Hardware stack levels required when called: 5
   960 ;; This function calls:
   961 ;;		_LCD_CMD
   962 ;; This function is called by:
   963 ;;		_main
   964 ;; This function uses a non-reentrant model
   965 ;;
   966                           
   967     06CD                     _LCD_Set_Cursor:	
   968                           ;psect for function _LCD_Set_Cursor
   969                           
   970                           
   971                           ;incstack = 0
   972                           ; Regs used in _LCD_Set_Cursor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   973                           ;LCD_Set_Cursor@ROW stored from wreg
   974     06CD  00F9               	movwf	LCD_Set_Cursor@ROW
   975     06CE                     l1065:
   976                           
   977                           ;LCD.c: 140: void LCD_Set_Cursor(unsigned char ROW, unsigned char COL);LCD.c: 141: {;LCD
      +                          .c: 142:   switch(ROW)
   978     06CE  2EEF               	goto	l1075
   979     06CF                     l1067:
   980                           
   981                           ;LCD.c: 145:       LCD_CMD(0xC0 + COL-1);
   982     06CF  0876               	movf	LCD_Set_Cursor@COL,w
   983     06D0  3EBF               	addlw	191
   984     06D1  120A  118A  2647  120A  118A  	fcall	_LCD_CMD
   985                           
   986                           ;LCD.c: 146:       break;
   987     06D6  2F02               	goto	l172
   988     06D7                     l1069:
   989                           
   990                           ;LCD.c: 148:       LCD_CMD(0x94 + COL-1);
   991     06D7  0876               	movf	LCD_Set_Cursor@COL,w
   992     06D8  3E93               	addlw	147
   993     06D9  120A  118A  2647  120A  118A  	fcall	_LCD_CMD
   994                           
   995                           ;LCD.c: 149:       break;
   996     06DE  2F02               	goto	l172
   997     06DF                     l1071:
   998                           
   999                           ;LCD.c: 151:       LCD_CMD(0xD4 + COL-1);
  1000     06DF  0876               	movf	LCD_Set_Cursor@COL,w
  1001     06E0  3ED3               	addlw	211
  1002     06E1  120A  118A  2647  120A  118A  	fcall	_LCD_CMD
  1003                           
  1004                           ;LCD.c: 152:       break;
  1005     06E6  2F02               	goto	l172
  1006     06E7                     l1073:
  1007                           
  1008                           ;LCD.c: 155:       LCD_CMD(0x80 + COL-1);
  1009     06E7  0876               	movf	LCD_Set_Cursor@COL,w
  1010     06E8  3E7F               	addlw	127
  1011     06E9  120A  118A  2647  120A  118A  	fcall	_LCD_CMD
  1012                           
  1013                           ;LCD.c: 156:   }
  1014     06EE  2F02               	goto	l172
  1015     06EF                     l1075:
  1016     06EF  0879               	movf	LCD_Set_Cursor@ROW,w
  1017     06F0  00F7               	movwf	??_LCD_Set_Cursor
  1018     06F1  01F8               	clrf	??_LCD_Set_Cursor+1
  1019                           
  1020                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1021                           ; Switch size 1, requested type "simple"
  1022                           ; Number of cases is 1, Range of values is 0 to 0
  1023                           ; switch strategies available:
  1024                           ; Name         Instructions Cycles
  1025                           ; simple_byte            4     3 (average)
  1026                           ; direct_byte           11     8 (fixed)
  1027                           ; jumptable            260     6 (fixed)
  1028                           ;	Chosen strategy is simple_byte
  1029     06F2  0878               	movf	??_LCD_Set_Cursor+1,w
  1030     06F3  3A00               	xorlw	0	; case 0
  1031     06F4  1903               	skipnz
  1032     06F5  2EF7               	goto	l1179
  1033     06F6  2EE7               	goto	l1073
  1034     06F7                     l1179:
  1035                           
  1036                           ; Switch size 1, requested type "simple"
  1037                           ; Number of cases is 3, Range of values is 2 to 4
  1038                           ; switch strategies available:
  1039                           ; Name         Instructions Cycles
  1040                           ; simple_byte           10     6 (average)
  1041                           ; direct_byte           20    11 (fixed)
  1042                           ; jumptable            263     9 (fixed)
  1043                           ;	Chosen strategy is simple_byte
  1044     06F7  0877               	movf	??_LCD_Set_Cursor,w
  1045     06F8  3A02               	xorlw	2	; case 2
  1046     06F9  1903               	skipnz
  1047     06FA  2ECF               	goto	l1067
  1048     06FB  3A01               	xorlw	1	; case 3
  1049     06FC  1903               	skipnz
  1050     06FD  2ED7               	goto	l1069
  1051     06FE  3A07               	xorlw	7	; case 4
  1052     06FF  1903               	skipnz
  1053     0700  2EDF               	goto	l1071
  1054     0701  2EE7               	goto	l1073
  1055     0702                     l172:
  1056     0702  0008               	return
  1057     0703                     __end_of_LCD_Set_Cursor:
  1058                           
  1059                           	psect	text6
  1060     074C                     __ptext6:	
  1061 ;; *************** function _LCD_Init *****************
  1062 ;; Defined at:
  1063 ;;		line 80 in file "LCD.c"
  1064 ;; Parameters:    Size  Location     Type
  1065 ;;  I2C_Add         1    wreg     unsigned char 
  1066 ;; Auto vars:     Size  Location     Type
  1067 ;;  I2C_Add         1    9[COMMON] unsigned char 
  1068 ;; Return value:  Size  Location     Type
  1069 ;;                  1    wreg      void 
  1070 ;; Registers used:
  1071 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1072 ;; Tracked objects:
  1073 ;;		On entry : 0/0
  1074 ;;		On exit  : 0/0
  1075 ;;		Unchanged: 0/0
  1076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1077 ;;      Params:         0       0       0       0       0
  1078 ;;      Locals:         1       0       0       0       0
  1079 ;;      Temps:          3       0       0       0       0
  1080 ;;      Totals:         4       0       0       0       0
  1081 ;;Total ram usage:        4 bytes
  1082 ;; Hardware stack levels used: 1
  1083 ;; Hardware stack levels required when called: 5
  1084 ;; This function calls:
  1085 ;;		_IO_Expander_Write
  1086 ;;		_LCD_CMD
  1087 ;; This function is called by:
  1088 ;;		_main
  1089 ;; This function uses a non-reentrant model
  1090 ;;
  1091                           
  1092     074C                     _LCD_Init:	
  1093                           ;psect for function _LCD_Init
  1094                           
  1095                           
  1096                           ;incstack = 0
  1097                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1098                           ;LCD_Init@I2C_Add stored from wreg
  1099     074C  00F9               	movwf	LCD_Init@I2C_Add
  1100     074D                     l1027:
  1101                           
  1102                           ;LCD.c: 80: void LCD_Init(unsigned char I2C_Add);LCD.c: 81: {;LCD.c: 82:   i2c_add = I2C
      +                          _Add;
  1103     074D  0879               	movf	LCD_Init@I2C_Add,w
  1104     074E  1283               	bcf	3,5	;RP0=0, select bank0
  1105     074F  1303               	bcf	3,6	;RP1=0, select bank0
  1106     0750  00A0               	movwf	_i2c_add
  1107     0751                     l1029:
  1108                           
  1109                           ;LCD.c: 83:   IO_Expander_Write(0x00);
  1110     0751  3000               	movlw	0
  1111     0752  120A  118A  267C  120A  118A  	fcall	_IO_Expander_Write
  1112     0757                     l1031:
  1113                           
  1114                           ;LCD.c: 84:   _delay((unsigned long)((30)*(16000000/4000.0)));
  1115     0757  309C               	movlw	156
  1116     0758  00F7               	movwf	??_LCD_Init+1
  1117     0759  30D7               	movlw	215
  1118     075A  00F6               	movwf	??_LCD_Init
  1119     075B                     u247:
  1120     075B  0BF6               	decfsz	??_LCD_Init,f
  1121     075C  2F5B               	goto	u247
  1122     075D  0BF7               	decfsz	??_LCD_Init+1,f
  1123     075E  2F5B               	goto	u247
  1124     075F                     l1033:
  1125                           
  1126                           ;LCD.c: 85:   LCD_CMD(0x03);
  1127     075F  3003               	movlw	3
  1128     0760  120A  118A  2647  120A  118A  	fcall	_LCD_CMD
  1129     0765                     l1035:
  1130                           
  1131                           ;LCD.c: 86:   _delay((unsigned long)((5)*(16000000/4000.0)));
  1132     0765  301A               	movlw	26
  1133     0766  00F7               	movwf	??_LCD_Init+1
  1134     0767  30F8               	movlw	248
  1135     0768  00F6               	movwf	??_LCD_Init
  1136     0769                     u257:
  1137     0769  0BF6               	decfsz	??_LCD_Init,f
  1138     076A  2F69               	goto	u257
  1139     076B  0BF7               	decfsz	??_LCD_Init+1,f
  1140     076C  2F69               	goto	u257
  1141     076D  0000               	nop
  1142     076E                     l1037:
  1143                           
  1144                           ;LCD.c: 87:   LCD_CMD(0x03);
  1145     076E  3003               	movlw	3
  1146     076F  120A  118A  2647  120A  118A  	fcall	_LCD_CMD
  1147     0774                     l1039:
  1148                           
  1149                           ;LCD.c: 88:   _delay((unsigned long)((5)*(16000000/4000.0)));
  1150     0774  301A               	movlw	26
  1151     0775  00F7               	movwf	??_LCD_Init+1
  1152     0776  30F8               	movlw	248
  1153     0777  00F6               	movwf	??_LCD_Init
  1154     0778                     u267:
  1155     0778  0BF6               	decfsz	??_LCD_Init,f
  1156     0779  2F78               	goto	u267
  1157     077A  0BF7               	decfsz	??_LCD_Init+1,f
  1158     077B  2F78               	goto	u267
  1159     077C  0000               	nop
  1160     077D                     l1041:
  1161                           
  1162                           ;LCD.c: 89:   LCD_CMD(0x03);
  1163     077D  3003               	movlw	3
  1164     077E  120A  118A  2647  120A  118A  	fcall	_LCD_CMD
  1165     0783                     l1043:
  1166                           
  1167                           ;LCD.c: 90:   _delay((unsigned long)((5)*(16000000/4000.0)));
  1168     0783  301A               	movlw	26
  1169     0784  00F7               	movwf	??_LCD_Init+1
  1170     0785  30F8               	movlw	248
  1171     0786  00F6               	movwf	??_LCD_Init
  1172     0787                     u277:
  1173     0787  0BF6               	decfsz	??_LCD_Init,f
  1174     0788  2F87               	goto	u277
  1175     0789  0BF7               	decfsz	??_LCD_Init+1,f
  1176     078A  2F87               	goto	u277
  1177     078B  0000               	nop
  1178     078C                     l1045:
  1179                           
  1180                           ;LCD.c: 91:   LCD_CMD(0x02);
  1181     078C  3002               	movlw	2
  1182     078D  120A  118A  2647  120A  118A  	fcall	_LCD_CMD
  1183     0792                     l1047:
  1184                           
  1185                           ;LCD.c: 92:   _delay((unsigned long)((5)*(16000000/4000.0)));
  1186     0792  301A               	movlw	26
  1187     0793  00F7               	movwf	??_LCD_Init+1
  1188     0794  30F8               	movlw	248
  1189     0795  00F6               	movwf	??_LCD_Init
  1190     0796                     u287:
  1191     0796  0BF6               	decfsz	??_LCD_Init,f
  1192     0797  2F96               	goto	u287
  1193     0798  0BF7               	decfsz	??_LCD_Init+1,f
  1194     0799  2F96               	goto	u287
  1195     079A  0000               	nop
  1196     079B                     l1049:
  1197                           
  1198                           ;LCD.c: 93:   LCD_CMD(0x20 | (2 << 2));
  1199     079B  3028               	movlw	40
  1200     079C  120A  118A  2647  120A  118A  	fcall	_LCD_CMD
  1201     07A1                     l1051:
  1202                           
  1203                           ;LCD.c: 94:   _delay((unsigned long)((50)*(16000000/4000.0)));
  1204     07A1  3002               	movlw	2
  1205     07A2  00F8               	movwf	??_LCD_Init+2
  1206     07A3  3004               	movlw	4
  1207     07A4  00F7               	movwf	??_LCD_Init+1
  1208     07A5  30BA               	movlw	186
  1209     07A6  00F6               	movwf	??_LCD_Init
  1210     07A7                     u297:
  1211     07A7  0BF6               	decfsz	??_LCD_Init,f
  1212     07A8  2FA7               	goto	u297
  1213     07A9  0BF7               	decfsz	??_LCD_Init+1,f
  1214     07AA  2FA7               	goto	u297
  1215     07AB  0BF8               	decfsz	??_LCD_Init+2,f
  1216     07AC  2FA7               	goto	u297
  1217     07AD  0000               	nop
  1218     07AE                     l1053:
  1219                           
  1220                           ;LCD.c: 95:   LCD_CMD(0x0C);
  1221     07AE  300C               	movlw	12
  1222     07AF  120A  118A  2647  120A  118A  	fcall	_LCD_CMD
  1223     07B4                     l1055:
  1224                           
  1225                           ;LCD.c: 96:   _delay((unsigned long)((50)*(16000000/4000.0)));
  1226     07B4  3002               	movlw	2
  1227     07B5  00F8               	movwf	??_LCD_Init+2
  1228     07B6  3004               	movlw	4
  1229     07B7  00F7               	movwf	??_LCD_Init+1
  1230     07B8  30BA               	movlw	186
  1231     07B9  00F6               	movwf	??_LCD_Init
  1232     07BA                     u307:
  1233     07BA  0BF6               	decfsz	??_LCD_Init,f
  1234     07BB  2FBA               	goto	u307
  1235     07BC  0BF7               	decfsz	??_LCD_Init+1,f
  1236     07BD  2FBA               	goto	u307
  1237     07BE  0BF8               	decfsz	??_LCD_Init+2,f
  1238     07BF  2FBA               	goto	u307
  1239     07C0  0000               	nop
  1240     07C1                     l1057:
  1241                           
  1242                           ;LCD.c: 97:   LCD_CMD(0x01);
  1243     07C1  3001               	movlw	1
  1244     07C2  120A  118A  2647  120A  118A  	fcall	_LCD_CMD
  1245     07C7                     l1059:
  1246                           
  1247                           ;LCD.c: 98:   _delay((unsigned long)((50)*(16000000/4000.0)));
  1248     07C7  3002               	movlw	2
  1249     07C8  00F8               	movwf	??_LCD_Init+2
  1250     07C9  3004               	movlw	4
  1251     07CA  00F7               	movwf	??_LCD_Init+1
  1252     07CB  30BA               	movlw	186
  1253     07CC  00F6               	movwf	??_LCD_Init
  1254     07CD                     u317:
  1255     07CD  0BF6               	decfsz	??_LCD_Init,f
  1256     07CE  2FCD               	goto	u317
  1257     07CF  0BF7               	decfsz	??_LCD_Init+1,f
  1258     07D0  2FCD               	goto	u317
  1259     07D1  0BF8               	decfsz	??_LCD_Init+2,f
  1260     07D2  2FCD               	goto	u317
  1261     07D3  0000               	nop
  1262     07D4                     l1061:
  1263                           
  1264                           ;LCD.c: 99:   LCD_CMD(0x04 | 0x02);
  1265     07D4  3006               	movlw	6
  1266     07D5  120A  118A  2647  120A  118A  	fcall	_LCD_CMD
  1267     07DA                     l1063:
  1268                           
  1269                           ;LCD.c: 100:   _delay((unsigned long)((50)*(16000000/4000.0)));
  1270     07DA  3002               	movlw	2
  1271     07DB  00F8               	movwf	??_LCD_Init+2
  1272     07DC  3004               	movlw	4
  1273     07DD  00F7               	movwf	??_LCD_Init+1
  1274     07DE  30BA               	movlw	186
  1275     07DF  00F6               	movwf	??_LCD_Init
  1276     07E0                     u327:
  1277     07E0  0BF6               	decfsz	??_LCD_Init,f
  1278     07E1  2FE0               	goto	u327
  1279     07E2  0BF7               	decfsz	??_LCD_Init+1,f
  1280     07E3  2FE0               	goto	u327
  1281     07E4  0BF8               	decfsz	??_LCD_Init+2,f
  1282     07E5  2FE0               	goto	u327
  1283     07E6  0000               	nop
  1284     07E7                     l145:
  1285     07E7  0008               	return
  1286     07E8                     __end_of_LCD_Init:
  1287                           
  1288                           	psect	text7
  1289     0647                     __ptext7:	
  1290 ;; *************** function _LCD_CMD *****************
  1291 ;; Defined at:
  1292 ;;		line 120 in file "LCD.c"
  1293 ;; Parameters:    Size  Location     Type
  1294 ;;  CMD             1    wreg     unsigned char 
  1295 ;; Auto vars:     Size  Location     Type
  1296 ;;  CMD             1    5[COMMON] unsigned char 
  1297 ;; Return value:  Size  Location     Type
  1298 ;;                  1    wreg      void 
  1299 ;; Registers used:
  1300 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1301 ;; Tracked objects:
  1302 ;;		On entry : 0/0
  1303 ;;		On exit  : 0/0
  1304 ;;		Unchanged: 0/0
  1305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1306 ;;      Params:         0       0       0       0       0
  1307 ;;      Locals:         1       0       0       0       0
  1308 ;;      Temps:          1       0       0       0       0
  1309 ;;      Totals:         2       0       0       0       0
  1310 ;;Total ram usage:        2 bytes
  1311 ;; Hardware stack levels used: 1
  1312 ;; Hardware stack levels required when called: 4
  1313 ;; This function calls:
  1314 ;;		_LCD_Write_4Bit
  1315 ;; This function is called by:
  1316 ;;		_LCD_Init
  1317 ;;		_LCD_Set_Cursor
  1318 ;;		_LCD_SL
  1319 ;;		_LCD_SR
  1320 ;;		_LCD_Clear
  1321 ;; This function uses a non-reentrant model
  1322 ;;
  1323                           
  1324     0647                     _LCD_CMD:	
  1325                           ;psect for function _LCD_CMD
  1326                           
  1327                           
  1328                           ;incstack = 0
  1329                           ; Regs used in _LCD_CMD: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1330                           ;LCD_CMD@CMD stored from wreg
  1331     0647  00F5               	movwf	LCD_CMD@CMD
  1332     0648                     l1021:
  1333                           
  1334                           ;LCD.c: 120: void LCD_CMD(unsigned char CMD);LCD.c: 121: {;LCD.c: 122:   RS = 0;
  1335     0648  01FA               	clrf	_RS
  1336     0649                     l1023:
  1337                           
  1338                           ;LCD.c: 123:   LCD_Write_4Bit(CMD & 0xF0);
  1339     0649  0875               	movf	LCD_CMD@CMD,w
  1340     064A  39F0               	andlw	240
  1341     064B  120A  118A  262E  120A  118A  	fcall	_LCD_Write_4Bit
  1342     0650                     l1025:
  1343                           
  1344                           ;LCD.c: 124:   LCD_Write_4Bit((CMD << 4) & 0xF0);
  1345     0650  0875               	movf	LCD_CMD@CMD,w
  1346     0651  00F4               	movwf	??_LCD_CMD
  1347     0652  3003               	movlw	3
  1348     0653                     u195:
  1349     0653  1003               	clrc
  1350     0654  0DF4               	rlf	??_LCD_CMD,f
  1351     0655  3EFF               	addlw	-1
  1352     0656  1D03               	skipz
  1353     0657  2E53               	goto	u195
  1354     0658  1003               	clrc
  1355     0659  0D74               	rlf	??_LCD_CMD,w
  1356     065A  39F0               	andlw	240
  1357     065B  120A  118A  262E  120A  118A  	fcall	_LCD_Write_4Bit
  1358     0660                     l154:
  1359     0660  0008               	return
  1360     0661                     __end_of_LCD_CMD:
  1361                           
  1362                           	psect	text8
  1363     062E                     __ptext8:	
  1364 ;; *************** function _LCD_Write_4Bit *****************
  1365 ;; Defined at:
  1366 ;;		line 111 in file "LCD.c"
  1367 ;; Parameters:    Size  Location     Type
  1368 ;;  Nibble          1    wreg     unsigned char 
  1369 ;; Auto vars:     Size  Location     Type
  1370 ;;  Nibble          1    3[COMMON] unsigned char 
  1371 ;; Return value:  Size  Location     Type
  1372 ;;                  1    wreg      void 
  1373 ;; Registers used:
  1374 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1375 ;; Tracked objects:
  1376 ;;		On entry : 0/0
  1377 ;;		On exit  : 0/0
  1378 ;;		Unchanged: 0/0
  1379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1380 ;;      Params:         0       0       0       0       0
  1381 ;;      Locals:         1       0       0       0       0
  1382 ;;      Temps:          1       0       0       0       0
  1383 ;;      Totals:         2       0       0       0       0
  1384 ;;Total ram usage:        2 bytes
  1385 ;; Hardware stack levels used: 1
  1386 ;; Hardware stack levels required when called: 3
  1387 ;; This function calls:
  1388 ;;		_IO_Expander_Write
  1389 ;; This function is called by:
  1390 ;;		_LCD_CMD
  1391 ;;		_LCD_Write_Char
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395     062E                     _LCD_Write_4Bit:	
  1396                           ;psect for function _LCD_Write_4Bit
  1397                           
  1398                           
  1399                           ;incstack = 0
  1400                           ; Regs used in _LCD_Write_4Bit: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1401                           ;LCD_Write_4Bit@Nibble stored from wreg
  1402     062E  00F3               	movwf	LCD_Write_4Bit@Nibble
  1403     062F                     l1015:
  1404                           
  1405                           ;LCD.c: 111: void LCD_Write_4Bit(unsigned char Nibble);LCD.c: 112: {;LCD.c: 114:   Nibbl
      +                          e |= RS;
  1406     062F  087A               	movf	_RS,w
  1407     0630  00FF               	movwf	btemp+1
  1408     0631  087F               	movf	btemp+1,w
  1409     0632  04F3               	iorwf	LCD_Write_4Bit@Nibble,f
  1410     0633                     l1017:
  1411                           
  1412                           ;LCD.c: 115:   IO_Expander_Write(Nibble | 0x04);
  1413     0633  0873               	movf	LCD_Write_4Bit@Nibble,w
  1414     0634  3804               	iorlw	4
  1415     0635  120A  118A  267C  120A  118A  	fcall	_IO_Expander_Write
  1416     063A                     l1019:
  1417                           
  1418                           ;LCD.c: 116:   IO_Expander_Write(Nibble & 0xFB);
  1419     063A  0873               	movf	LCD_Write_4Bit@Nibble,w
  1420     063B  39FB               	andlw	251
  1421     063C  120A  118A  267C  120A  118A  	fcall	_IO_Expander_Write
  1422                           
  1423                           ;LCD.c: 117:   _delay((unsigned long)((50)*(16000000/4000000.0)));
  1424     0641  3042               	movlw	66
  1425     0642  00F2               	movwf	??_LCD_Write_4Bit
  1426     0643                     u337:
  1427     0643  0BF2               	decfsz	??_LCD_Write_4Bit,f
  1428     0644  2E43               	goto	u337
  1429     0645  0000               	nop
  1430     0646                     l151:
  1431     0646  0008               	return
  1432     0647                     __end_of_LCD_Write_4Bit:
  1433                           
  1434                           	psect	text9
  1435     067C                     __ptext9:	
  1436 ;; *************** function _IO_Expander_Write *****************
  1437 ;; Defined at:
  1438 ;;		line 103 in file "LCD.c"
  1439 ;; Parameters:    Size  Location     Type
  1440 ;;  Data            1    wreg     unsigned char 
  1441 ;; Auto vars:     Size  Location     Type
  1442 ;;  Data            1    1[COMMON] unsigned char 
  1443 ;; Return value:  Size  Location     Type
  1444 ;;                  1    wreg      void 
  1445 ;; Registers used:
  1446 ;;		wreg, status,2, status,0, pclath, cstack
  1447 ;; Tracked objects:
  1448 ;;		On entry : 0/0
  1449 ;;		On exit  : 0/0
  1450 ;;		Unchanged: 0/0
  1451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1452 ;;      Params:         0       0       0       0       0
  1453 ;;      Locals:         1       0       0       0       0
  1454 ;;      Temps:          0       0       0       0       0
  1455 ;;      Totals:         1       0       0       0       0
  1456 ;;Total ram usage:        1 bytes
  1457 ;; Hardware stack levels used: 1
  1458 ;; Hardware stack levels required when called: 2
  1459 ;; This function calls:
  1460 ;;		_I2C__Start
  1461 ;;		_I2C__Stop
  1462 ;;		_I2C__Write
  1463 ;; This function is called by:
  1464 ;;		_LCD_Init
  1465 ;;		_LCD_Write_4Bit
  1466 ;;		_Backlight
  1467 ;;		_noBacklight
  1468 ;; This function uses a non-reentrant model
  1469 ;;
  1470                           
  1471     067C                     _IO_Expander_Write:	
  1472                           ;psect for function _IO_Expander_Write
  1473                           
  1474                           
  1475                           ;incstack = 0
  1476                           ; Regs used in _IO_Expander_Write: [wreg+status,2+status,0+pclath+cstack]
  1477                           ;IO_Expander_Write@Data stored from wreg
  1478     067C  00F1               	movwf	IO_Expander_Write@Data
  1479     067D                     l1013:
  1480                           
  1481                           ;LCD.c: 103: void IO_Expander_Write(unsigned char Data);LCD.c: 104: {;LCD.c: 105:   I2C_
      +                          _Start();
  1482     067D  120A  118A  25F2  120A  118A  	fcall	_I2C__Start
  1483                           
  1484                           ;LCD.c: 106:   I2C__Write(i2c_add);
  1485     0682  1283               	bcf	3,5	;RP0=0, select bank0
  1486     0683  1303               	bcf	3,6	;RP1=0, select bank0
  1487     0684  0820               	movf	_i2c_add,w
  1488     0685  120A  118A  261E  120A  118A  	fcall	_I2C__Write
  1489                           
  1490                           ;LCD.c: 107:   I2C__Write(Data | BackLight_State);
  1491     068A  0871               	movf	IO_Expander_Write@Data,w
  1492     068B  1283               	bcf	3,5	;RP0=0, select bank0
  1493     068C  1303               	bcf	3,6	;RP1=0, select bank0
  1494     068D  0421               	iorwf	_BackLight_State,w
  1495     068E  120A  118A  261E  120A  118A  	fcall	_I2C__Write
  1496                           
  1497                           ;LCD.c: 108:   I2C__Stop();
  1498     0693  120A  118A  25FB  120A  118A  	fcall	_I2C__Stop
  1499     0698                     l148:
  1500     0698  0008               	return
  1501     0699                     __end_of_IO_Expander_Write:
  1502                           
  1503                           	psect	text10
  1504     061E                     __ptext10:	
  1505 ;; *************** function _I2C__Write *****************
  1506 ;; Defined at:
  1507 ;;		line 56 in file "LCD.c"
  1508 ;; Parameters:    Size  Location     Type
  1509 ;;  data            1    wreg     unsigned char 
  1510 ;; Auto vars:     Size  Location     Type
  1511 ;;  data            1    0[COMMON] unsigned char 
  1512 ;; Return value:  Size  Location     Type
  1513 ;;                  1    wreg      unsigned char 
  1514 ;; Registers used:
  1515 ;;		wreg, status,2, status,0, pclath, cstack
  1516 ;; Tracked objects:
  1517 ;;		On entry : 0/0
  1518 ;;		On exit  : 0/0
  1519 ;;		Unchanged: 0/0
  1520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1521 ;;      Params:         0       0       0       0       0
  1522 ;;      Locals:         1       0       0       0       0
  1523 ;;      Temps:          0       0       0       0       0
  1524 ;;      Totals:         1       0       0       0       0
  1525 ;;Total ram usage:        1 bytes
  1526 ;; Hardware stack levels used: 1
  1527 ;; Hardware stack levels required when called: 1
  1528 ;; This function calls:
  1529 ;;		_I2C__Wait
  1530 ;; This function is called by:
  1531 ;;		_IO_Expander_Write
  1532 ;; This function uses a non-reentrant model
  1533 ;;
  1534                           
  1535     061E                     _I2C__Write:	
  1536                           ;psect for function _I2C__Write
  1537                           
  1538                           
  1539                           ;incstack = 0
  1540                           ; Regs used in _I2C__Write: [wreg+status,2+status,0+pclath+cstack]
  1541                           ;I2C__Write@data stored from wreg
  1542     061E  00F0               	movwf	I2C__Write@data
  1543     061F                     l1009:
  1544                           
  1545                           ;LCD.c: 56: unsigned char I2C__Write(unsigned char data);LCD.c: 57: {;LCD.c: 58:     I2C
      +                          __Wait();
  1546     061F  120A  118A  2604  120A  118A  	fcall	_I2C__Wait
  1547     0624                     l1011:
  1548                           
  1549                           ;LCD.c: 59:     SSPBUF = data;
  1550     0624  0870               	movf	I2C__Write@data,w
  1551     0625  1283               	bcf	3,5	;RP0=0, select bank0
  1552     0626  1303               	bcf	3,6	;RP1=0, select bank0
  1553     0627  0093               	movwf	19	;volatile
  1554     0628                     l133:	
  1555                           ;LCD.c: 60:     while(!SSPIF);
  1556                           
  1557     0628  1D8C               	btfss	12,3	;volatile
  1558     0629  2E2B               	goto	u181
  1559     062A  2E2C               	goto	u180
  1560     062B                     u181:
  1561     062B  2E28               	goto	l133
  1562     062C                     u180:
  1563     062C                     l135:
  1564                           
  1565                           ;LCD.c: 61:  SSPIF = 0;
  1566     062C  118C               	bcf	12,3	;volatile
  1567     062D                     l136:	
  1568                           ;LCD.c: 62:     return ACKSTAT;;	Return value of _I2C__Write is never used
  1569                           
  1570     062D  0008               	return
  1571     062E                     __end_of_I2C__Write:
  1572                           
  1573                           	psect	text11
  1574     05FB                     __ptext11:	
  1575 ;; *************** function _I2C__Stop *****************
  1576 ;; Defined at:
  1577 ;;		line 36 in file "LCD.c"
  1578 ;; Parameters:    Size  Location     Type
  1579 ;;		None
  1580 ;; Auto vars:     Size  Location     Type
  1581 ;;		None
  1582 ;; Return value:  Size  Location     Type
  1583 ;;                  1    wreg      void 
  1584 ;; Registers used:
  1585 ;;		wreg, status,2, status,0, pclath, cstack
  1586 ;; Tracked objects:
  1587 ;;		On entry : 0/0
  1588 ;;		On exit  : 0/0
  1589 ;;		Unchanged: 0/0
  1590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1591 ;;      Params:         0       0       0       0       0
  1592 ;;      Locals:         0       0       0       0       0
  1593 ;;      Temps:          0       0       0       0       0
  1594 ;;      Totals:         0       0       0       0       0
  1595 ;;Total ram usage:        0 bytes
  1596 ;; Hardware stack levels used: 1
  1597 ;; Hardware stack levels required when called: 1
  1598 ;; This function calls:
  1599 ;;		_I2C__Wait
  1600 ;; This function is called by:
  1601 ;;		_IO_Expander_Write
  1602 ;; This function uses a non-reentrant model
  1603 ;;
  1604                           
  1605     05FB                     _I2C__Stop:	
  1606                           ;psect for function _I2C__Stop
  1607                           
  1608     05FB                     l1005:	
  1609                           ;incstack = 0
  1610                           ; Regs used in _I2C__Stop: [wreg+status,2+status,0+pclath+cstack]
  1611                           
  1612                           
  1613                           ;LCD.c: 38:     I2C__Wait();
  1614     05FB  120A  118A  2604  120A  118A  	fcall	_I2C__Wait
  1615     0600                     l1007:
  1616                           
  1617                           ;LCD.c: 39:     PEN = 1;
  1618     0600  1683               	bsf	3,5	;RP0=1, select bank1
  1619     0601  1303               	bcf	3,6	;RP1=0, select bank1
  1620     0602  1511               	bsf	17,2	;volatile
  1621     0603                     l124:
  1622     0603  0008               	return
  1623     0604                     __end_of_I2C__Stop:
  1624                           
  1625                           	psect	text12
  1626     05F2                     __ptext12:	
  1627 ;; *************** function _I2C__Start *****************
  1628 ;; Defined at:
  1629 ;;		line 24 in file "LCD.c"
  1630 ;; Parameters:    Size  Location     Type
  1631 ;;		None
  1632 ;; Auto vars:     Size  Location     Type
  1633 ;;		None
  1634 ;; Return value:  Size  Location     Type
  1635 ;;                  1    wreg      void 
  1636 ;; Registers used:
  1637 ;;		wreg, status,2, status,0, pclath, cstack
  1638 ;; Tracked objects:
  1639 ;;		On entry : 0/0
  1640 ;;		On exit  : 0/0
  1641 ;;		Unchanged: 0/0
  1642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1643 ;;      Params:         0       0       0       0       0
  1644 ;;      Locals:         0       0       0       0       0
  1645 ;;      Temps:          0       0       0       0       0
  1646 ;;      Totals:         0       0       0       0       0
  1647 ;;Total ram usage:        0 bytes
  1648 ;; Hardware stack levels used: 1
  1649 ;; Hardware stack levels required when called: 1
  1650 ;; This function calls:
  1651 ;;		_I2C__Wait
  1652 ;; This function is called by:
  1653 ;;		_IO_Expander_Write
  1654 ;; This function uses a non-reentrant model
  1655 ;;
  1656                           
  1657     05F2                     _I2C__Start:	
  1658                           ;psect for function _I2C__Start
  1659                           
  1660     05F2                     l1001:	
  1661                           ;incstack = 0
  1662                           ; Regs used in _I2C__Start: [wreg+status,2+status,0+pclath+cstack]
  1663                           
  1664                           
  1665                           ;LCD.c: 26:     I2C__Wait();
  1666     05F2  120A  118A  2604  120A  118A  	fcall	_I2C__Wait
  1667     05F7                     l1003:
  1668                           
  1669                           ;LCD.c: 27:     SEN = 1;
  1670     05F7  1683               	bsf	3,5	;RP0=1, select bank1
  1671     05F8  1303               	bcf	3,6	;RP1=0, select bank1
  1672     05F9  1411               	bsf	17,0	;volatile
  1673     05FA                     l118:
  1674     05FA  0008               	return
  1675     05FB                     __end_of_I2C__Start:
  1676                           
  1677                           	psect	text13
  1678     0604                     __ptext13:	
  1679 ;; *************** function _I2C__Wait *****************
  1680 ;; Defined at:
  1681 ;;		line 19 in file "LCD.c"
  1682 ;; Parameters:    Size  Location     Type
  1683 ;;		None
  1684 ;; Auto vars:     Size  Location     Type
  1685 ;;		None
  1686 ;; Return value:  Size  Location     Type
  1687 ;;                  1    wreg      void 
  1688 ;; Registers used:
  1689 ;;		wreg, status,2
  1690 ;; Tracked objects:
  1691 ;;		On entry : 0/0
  1692 ;;		On exit  : 0/0
  1693 ;;		Unchanged: 0/0
  1694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1695 ;;      Params:         0       0       0       0       0
  1696 ;;      Locals:         0       0       0       0       0
  1697 ;;      Temps:          0       0       0       0       0
  1698 ;;      Totals:         0       0       0       0       0
  1699 ;;Total ram usage:        0 bytes
  1700 ;; Hardware stack levels used: 1
  1701 ;; This function calls:
  1702 ;;		Nothing
  1703 ;; This function is called by:
  1704 ;;		_I2C__Start
  1705 ;;		_I2C__Stop
  1706 ;;		_I2C__Write
  1707 ;;		_I2C__RepeatedStart
  1708 ;;		_I2C_ACK
  1709 ;;		_I2C_NACK
  1710 ;;		_I2C_Read_Byte
  1711 ;; This function uses a non-reentrant model
  1712 ;;
  1713                           
  1714     0604                     _I2C__Wait:	
  1715                           ;psect for function _I2C__Wait
  1716                           
  1717     0604                     l997:	
  1718                           ;incstack = 0
  1719                           ; Regs used in _I2C__Wait: [wreg+status,2]
  1720                           
  1721     0604                     l112:	
  1722                           ;LCD.c: 21:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  1723                           
  1724     0604  1683               	bsf	3,5	;RP0=1, select bank1
  1725     0605  1303               	bcf	3,6	;RP1=0, select bank1
  1726     0606  1914               	btfsc	20,2	;volatile
  1727     0607  2E09               	goto	u161
  1728     0608  2E0A               	goto	u160
  1729     0609                     u161:
  1730     0609  2E04               	goto	l112
  1731     060A                     u160:
  1732     060A                     l999:
  1733     060A  0811               	movf	17,w	;volatile
  1734     060B  391F               	andlw	31
  1735     060C  1D03               	btfss	3,2
  1736     060D  2E0F               	goto	u171
  1737     060E  2E10               	goto	u170
  1738     060F                     u171:
  1739     060F  2E04               	goto	l112
  1740     0610                     u170:
  1741     0610                     l115:
  1742     0610  0008               	return
  1743     0611                     __end_of_I2C__Wait:
  1744     007E                     btemp	set	126	;btemp
  1745     007E                     wtemp0	set	126
  1746                           
  1747                           	psect	idloc
  1748                           
  1749                           ;Config register IDLOC0 @ 0x2000
  1750                           ;	unspecified, using default values
  1751     2000                     	org	8192
  1752     2000  3FFF               	dw	16383
  1753                           
  1754                           ;Config register IDLOC1 @ 0x2001
  1755                           ;	unspecified, using default values
  1756     2001                     	org	8193
  1757     2001  3FFF               	dw	16383
  1758                           
  1759                           ;Config register IDLOC2 @ 0x2002
  1760                           ;	unspecified, using default values
  1761     2002                     	org	8194
  1762     2002  3FFF               	dw	16383
  1763                           
  1764                           ;Config register IDLOC3 @ 0x2003
  1765                           ;	unspecified, using default values
  1766     2003                     	org	8195
  1767     2003  3FFF               	dw	16383
  1768                           
  1769                           	psect	config
  1770                           
  1771                           ;Config register CONFIG @ 0x2007
  1772                           ;	Oscillator Selection bits
  1773                           ;	FOSC = HS, HS oscillator
  1774                           ;	Watchdog Timer Enable bit
  1775                           ;	WDTE = OFF, WDT disabled
  1776                           ;	Power-up Timer Enable bit
  1777                           ;	PWRTE = OFF, PWRT disabled
  1778                           ;	Brown-out Reset Enable bit
  1779                           ;	BOREN = OFF, BOR disabled
  1780                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1781                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1782                           ;	Data EEPROM Memory Code Protection bit
  1783                           ;	CPD = OFF, Data EEPROM code protection off
  1784                           ;	Flash Program Memory Write Enable bits
  1785                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1786                           ;	In-Circuit Debugger Mode bit
  1787                           ;	DEBUG = 0x1, unprogrammed default
  1788                           ;	Flash Program Memory Code Protection bit
  1789                           ;	CP = OFF, Code protection off
  1790     2007                     	org	8199
  1791     2007  3F3A               	dw	16186

Data Sizes:
    Strings     0
    Constant    0
    Data        3
    BSS         2
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80      0       2
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_LCD_Init
    _main->_LCD_Set_Cursor
    _LCD_Write_Char->_LCD_Write_4Bit
    _LCD_Set_Cursor->_LCD_CMD
    _LCD_Init->_LCD_CMD
    _LCD_CMD->_LCD_Write_4Bit
    _LCD_Write_4Bit->_IO_Expander_Write
    _IO_Expander_Write->_I2C__Write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     696
                           _LCD_Init
                     _LCD_Set_Cursor
                     _LCD_Write_Char
                        _LCD__Config
                           _SpiSlave
                             _config
 ---------------------------------------------------------------------------------
 (1) _config                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SpiSlave                                             4     4      0      45
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _LCD__Config                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_Char                                       2     2      0     133
                                              4 COMMON     2     2      0
                     _LCD_Write_4Bit
 ---------------------------------------------------------------------------------
 (1) _LCD_Set_Cursor                                       4     3      1     319
                                              6 COMMON     4     3      1
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             4     4      0     199
                                              6 COMMON     4     4      0
                  _IO_Expander_Write
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _LCD_CMD                                              2     2      0     133
                                              4 COMMON     2     2      0
                     _LCD_Write_4Bit
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_4Bit                                       2     2      0      89
                                              2 COMMON     2     2      0
                  _IO_Expander_Write
 ---------------------------------------------------------------------------------
 (3) _IO_Expander_Write                                    1     1      0      44
                                              1 COMMON     1     1      0
                         _I2C__Start
                          _I2C__Stop
                         _I2C__Write
 ---------------------------------------------------------------------------------
 (4) _I2C__Write                                           1     1      0      22
                                              0 COMMON     1     1      0
                          _I2C__Wait
 ---------------------------------------------------------------------------------
 (4) _I2C__Stop                                            0     0      0       0
                          _I2C__Wait
 ---------------------------------------------------------------------------------
 (4) _I2C__Start                                           0     0      0       0
                          _I2C__Wait
 ---------------------------------------------------------------------------------
 (5) _I2C__Wait                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init
     _IO_Expander_Write
       _I2C__Start
         _I2C__Wait
       _I2C__Stop
         _I2C__Wait
       _I2C__Write
         _I2C__Wait
     _LCD_CMD
       _LCD_Write_4Bit
         _IO_Expander_Write
   _LCD_Set_Cursor
     _LCD_CMD
   _LCD_Write_Char
     _LCD_Write_4Bit
   _LCD__Config
   _SpiSlave
   _config

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0       2       5        2.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      A       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      10      12        0.0%
ABS                  0      0      10       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Wed Jun 14 20:29:07 2023

                       l33 05F1                         l42 070F                         l51 073A  
                       l36 0703                         l45 0720                         l54 074B  
                       l39 0709                         u50 0709                         u51 0708  
                       u60 070D                         u61 070C                         u70 0715  
                       u71 0714                         _RS 007A                         u80 071E  
                       u81 071D                         u90 0733                         u91 0732  
             ?_LCD__Config 0070                        l112 0604                        l115 0610  
                      l124 0603                        l133 0628                        l109 061D  
                      l118 05FA                        l135 062C                        l151 0646  
                      l136 062D                        l145 07E7                        l154 0660  
                      l148 0698                        l172 0702                        l157 067B  
                      l811 0703                        l821 0718                        l813 070D  
                      l823 071E                        l831 0734                        l841 061B  
                      l833 073E                        l825 0721                        l809 05EB  
                      l843 061C                        l835 0611                        l827 072A  
                      l819 0715                        l837 0615                        l829 072F  
                      l839 0618                        l997 0604                        l999 060A  
                      _RB0 0030                        _RB1 0031                        _RB2 0032  
                      _RB3 0033                        u100 073E                        u101 073D  
                      u110 074B                        u111 074A                        u210 06C2  
                      u115 0747                        u211 06C1                        u205 066E  
                      u160 060A                        u161 0609                        u170 0610  
                      u171 060F                        u307 07BA                        u180 062C  
                      u181 062B                        u317 07CD                        u327 07E0  
                      u247 075B                        _PEN 048A                        u337 0643  
                      u257 0769                        u195 0653                        u267 0778  
                      u277 0787                        u287 0796                        u297 07A7  
                      _SEN 0488            __end_of_LCD_CMD 0661             _LCD_Set_Cursor 06CD  
                     l1001 05F2                       l1003 05F7                       l1011 0624  
                     l1005 05FB                       l1013 067D                       l1021 0648  
                     l1101 06C5                       l1007 0600                       l1015 062F  
                     l1023 0649                       l1031 0757                       l1103 06C7  
                     l1009 061F                       l1017 0633                       l1025 0650  
                     l1041 077D                       l1033 075F                       l1019 063A  
                     l1051 07A1                       l1043 0783                       l1035 0765  
                     l1027 074D                       l1061 07D4                       l1053 07AE  
                     l1045 078C                       l1037 076E                       l1029 0751  
                     l1063 07DA                       l1055 07B4                       l1047 0792  
                     l1039 0774                       l1071 06DF                       l1057 07C1  
                     l1049 079B                       l1073 06E7                       l1065 06CE  
                     l1081 0662                       l1059 07C7                       l1067 06CF  
                     l1075 06EF                       l1083 0664                       l1091 06A9  
                     l1069 06D7                       l1093 06AE                       l1085 0699  
                     l1095 06B6                       l1087 069E                       l1097 06BC  
                     l1089 06A4                       l1179 06F7                       l1099 06C2  
                     _RCEN 048B                       _RSEN 0489                       _main 0699  
                     btemp 007E                       start 0000       LCD_Write_4Bit@Nibble 0073  
         __end_of_LCD_Init 07E8                      ?_main 0070                      _ACKEN 048C  
                    _ACKDT 048D                      _SSPIF 0063     __end_of_LCD_Set_Cursor 0703  
        __end_of_I2C__Wait 0611          __end_of_I2C__Stop 0604                      status 0003  
                    wtemp0 007E             _LCD_Write_4Bit 062E             _LCD_Write_Char 0661  
          __initialization 07E8               __end_of_main 06CD          _IO_Expander_Write 067C  
       ?_IO_Expander_Write 0070                     ??_main 007A                  ??_LCD_CMD 0074  
         __end_of_SpiSlave 074C        ??_IO_Expander_Write 0071            ?_LCD_Set_Cursor 0076  
             ??_I2C__Start 0070               ??_I2C__Write 0070                     _SSPADD 0093  
                   _TRISB0 0430                     _TRISB1 0431                     _TRISB2 0432  
                   _TRISB3 0433                     _TRISC3 043B                     _TRISC4 043C  
                   _SSPCON 0014                     _SSPBUF 0013     __end_of_LCD_Write_4Bit 0647  
   __end_of_LCD_Write_Char 067C  __end_of_IO_Expander_Write 0699                     _config 05EB  
       __end_of_I2C__Start 05FB         __end_of_I2C__Write 062E               __pdataCOMMON 007C  
  __end_of__initialization 07FC                  ?_LCD_Init 0070            ?_LCD_Write_4Bit 0070  
          ?_LCD_Write_Char 0070             __pcstackCOMMON 0070               __pidataBANK0 05E8  
               ??_LCD_Init 0076                 __pmaintext 0699                  ?_SpiSlave 0070  
                  ?_config 0070                    _ACKSTAT 048E                    _LCD_CMD 0647  
                  _SSPCON2 0091                    _SSPSTAT 0094                  _I2C__Wait 0604  
                  _i2c_add 0020                  _I2C__Stop 05FB                 ??_SpiSlave 0070  
         ??_LCD_Set_Cursor 0077                    __ptext1 05EB                    __ptext2 0703  
                  __ptext3 0611                    __ptext4 0661                    __ptext5 06CD  
                  __ptext6 074C                    __ptext7 0647                    __ptext8 062E  
                  __ptext9 067C       end_of_initialization 07FC                 ?_I2C__Wait 0070  
               ?_I2C__Stop 0070                 LCD_CMD@CMD 0075           ??_LCD_Write_4Bit 0072  
         ??_LCD_Write_Char 0074              __pidataCOMMON 05E9              ??_LCD__Config 0070  
           __end_of_config 05F2        start_initialization 07E8             I2C__Write@data 0070  
              ??_I2C__Wait 0070                ??_I2C__Stop 0070                  SpiSlave@i 0072  
                 ??_config 0070                __pdataBANK0 0021                _dataReceive 007B  
                 ?_LCD_CMD 0070                __pbssCOMMON 007A                  ___latbits 0002  
      __end_of_LCD__Config 061E                  _dataTrans 007D                  __pnvBANK0 0020  
    IO_Expander_Write@Data 0071                   _LCD_Init 074C                _LCD__Config 0611  
             SpiSlave@temp 0071                 _I2C__Start 05F2                 _I2C__Write 061E  
                 _SpiSlave 0703                   _dataTemp 007C                   __ptext10 061E  
                 __ptext11 05FB                   __ptext12 05F2                   __ptext13 0604  
          _BackLight_State 0021         LCD_Write_Char@Data 0075                ?_I2C__Start 0070  
              ?_I2C__Write 0070            LCD_Init@I2C_Add 0079          LCD_Set_Cursor@COL 0076  
        LCD_Set_Cursor@ROW 0079  
